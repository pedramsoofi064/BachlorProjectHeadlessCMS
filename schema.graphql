# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createPageSection(data: PageSectionCreateInput!): PageSection
  createPageSections(data: [PageSectionCreateInput!]!): [PageSection]
  updatePageSection(
    where: PageSectionWhereUniqueInput!
    data: PageSectionUpdateInput!
  ): PageSection
  updatePageSections(data: [PageSectionUpdateArgs!]!): [PageSection]
  deletePageSection(where: PageSectionWhereUniqueInput!): PageSection
  deletePageSections(where: [PageSectionWhereUniqueInput!]!): [PageSection]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createNavigationMenu(data: NavigationMenuCreateInput!): NavigationMenu
  createNavigationMenus(data: [NavigationMenuCreateInput!]!): [NavigationMenu]
  updateNavigationMenu(
    where: NavigationMenuWhereUniqueInput!
    data: NavigationMenuUpdateInput!
  ): NavigationMenu
  updateNavigationMenus(data: [NavigationMenuUpdateArgs!]!): [NavigationMenu]
  deleteNavigationMenu(where: NavigationMenuWhereUniqueInput!): NavigationMenu
  deleteNavigationMenus(
    where: [NavigationMenuWhereUniqueInput!]!
  ): [NavigationMenu]
  createPartner(data: PartnerCreateInput!): Partner
  createPartners(data: [PartnerCreateInput!]!): [Partner]
  updatePartner(
    where: PartnerWhereUniqueInput!
    data: PartnerUpdateInput!
  ): Partner
  updatePartners(data: [PartnerUpdateArgs!]!): [Partner]
  deletePartner(where: PartnerWhereUniqueInput!): Partner
  deletePartners(where: [PartnerWhereUniqueInput!]!): [Partner]
  createAchievement(data: AchievementCreateInput!): Achievement
  createAchievements(data: [AchievementCreateInput!]!): [Achievement]
  updateAchievement(
    where: AchievementWhereUniqueInput!
    data: AchievementUpdateInput!
  ): Achievement
  updateAchievements(data: [AchievementUpdateArgs!]!): [Achievement]
  deleteAchievement(where: AchievementWhereUniqueInput!): Achievement
  deleteAchievements(where: [AchievementWhereUniqueInput!]!): [Achievement]
  createNewsletterSubmission(
    data: NewsletterSubmissionCreateInput!
  ): NewsletterSubmission
  createNewsletterSubmissions(
    data: [NewsletterSubmissionCreateInput!]!
  ): [NewsletterSubmission]
  updateNewsletterSubmission(
    where: NewsletterSubmissionWhereUniqueInput!
    data: NewsletterSubmissionUpdateInput!
  ): NewsletterSubmission
  updateNewsletterSubmissions(
    data: [NewsletterSubmissionUpdateArgs!]!
  ): [NewsletterSubmission]
  deleteNewsletterSubmission(
    where: NewsletterSubmissionWhereUniqueInput!
  ): NewsletterSubmission
  deleteNewsletterSubmissions(
    where: [NewsletterSubmissionWhereUniqueInput!]!
  ): [NewsletterSubmission]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type User {
  id: ID!
  name: String
  email: String
  isAdmin: Boolean
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  isAdmin: Boolean
  password: String
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Page {
  id: ID!
  pageURL: String
  title: String
  sections(
    where: PageSectionWhereInput! = {}
    orderBy: [PageSectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PageSection!]
  sectionsCount(where: PageSectionWhereInput! = {}): Int
  additionalData: JSON
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  pageURL: StringFilter
  title: StringFilter
  sections: PageSectionManyRelationFilter
}

input PageSectionManyRelationFilter {
  every: PageSectionWhereInput
  some: PageSectionWhereInput
  none: PageSectionWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  pageURL: OrderDirection
  title: OrderDirection
}

input PageUpdateInput {
  pageURL: String
  title: String
  sections: PageSectionRelateToManyForUpdateInput
  additionalData: JSON
}

input PageSectionRelateToManyForUpdateInput {
  disconnect: [PageSectionWhereUniqueInput!]
  set: [PageSectionWhereUniqueInput!]
  create: [PageSectionCreateInput!]
  connect: [PageSectionWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  pageURL: String
  title: String
  sections: PageSectionRelateToManyForCreateInput
  additionalData: JSON
}

input PageSectionRelateToManyForCreateInput {
  create: [PageSectionCreateInput!]
  connect: [PageSectionWhereUniqueInput!]
}

type PageSection {
  id: ID!
  sectionId: String
  sectionTitle: String
  backgroundImages(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  backgroundImagesCount(where: ImageWhereInput! = {}): Int
  contentTitle_fa: String
  contentTitle_en: String
  content_fa: PageSection_content_fa_Document
  content_en: PageSection_content_en_Document
  isActive: Boolean
  page: Page
  additionalData: JSON
}

type PageSection_content_fa_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type PageSection_content_en_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageSectionWhereUniqueInput {
  id: ID
}

input PageSectionWhereInput {
  AND: [PageSectionWhereInput!]
  OR: [PageSectionWhereInput!]
  NOT: [PageSectionWhereInput!]
  id: IDFilter
  sectionId: StringFilter
  sectionTitle: StringFilter
  backgroundImages: ImageManyRelationFilter
  contentTitle_fa: StringFilter
  contentTitle_en: StringFilter
  isActive: BooleanFilter
  page: PageWhereInput
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input PageSectionOrderByInput {
  id: OrderDirection
  sectionId: OrderDirection
  sectionTitle: OrderDirection
  contentTitle_fa: OrderDirection
  contentTitle_en: OrderDirection
  isActive: OrderDirection
}

input PageSectionUpdateInput {
  sectionId: String
  sectionTitle: String
  backgroundImages: ImageRelateToManyForUpdateInput
  contentTitle_fa: String
  contentTitle_en: String
  content_fa: JSON
  content_en: JSON
  isActive: Boolean
  page: PageRelateToOneForUpdateInput
  additionalData: JSON
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input PageSectionUpdateArgs {
  where: PageSectionWhereUniqueInput!
  data: PageSectionUpdateInput!
}

input PageSectionCreateInput {
  sectionId: String
  sectionTitle: String
  backgroundImages: ImageRelateToManyForCreateInput
  contentTitle_fa: String
  contentTitle_en: String
  content_fa: JSON
  content_en: JSON
  isActive: Boolean
  page: PageRelateToOneForCreateInput
  additionalData: JSON
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

type Image {
  id: ID!
  title: String
  alt: String
  image: ImageFieldOutput
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  src: String!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  alt: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  alt: OrderDirection
}

input ImageUpdateInput {
  title: String
  alt: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  alt: String
  image: ImageFieldInput
}

type NavigationMenu {
  id: ID!
  title_fa: String
  title_en: String
  pageURL: String
  status: String
}

input NavigationMenuWhereUniqueInput {
  id: ID
}

input NavigationMenuWhereInput {
  AND: [NavigationMenuWhereInput!]
  OR: [NavigationMenuWhereInput!]
  NOT: [NavigationMenuWhereInput!]
  id: IDFilter
  title_fa: StringFilter
  title_en: StringFilter
  pageURL: StringFilter
  status: StringNullableFilter
}

input NavigationMenuOrderByInput {
  id: OrderDirection
  title_fa: OrderDirection
  title_en: OrderDirection
  pageURL: OrderDirection
  status: OrderDirection
}

input NavigationMenuUpdateInput {
  title_fa: String
  title_en: String
  pageURL: String
  status: String
}

input NavigationMenuUpdateArgs {
  where: NavigationMenuWhereUniqueInput!
  data: NavigationMenuUpdateInput!
}

input NavigationMenuCreateInput {
  title_fa: String
  title_en: String
  pageURL: String
  status: String
}

type Partner {
  id: ID!
  name: String
}

input PartnerWhereUniqueInput {
  id: ID
}

input PartnerWhereInput {
  AND: [PartnerWhereInput!]
  OR: [PartnerWhereInput!]
  NOT: [PartnerWhereInput!]
  id: IDFilter
  name: StringFilter
}

input PartnerOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PartnerUpdateInput {
  name: String
}

input PartnerUpdateArgs {
  where: PartnerWhereUniqueInput!
  data: PartnerUpdateInput!
}

input PartnerCreateInput {
  name: String
}

type Achievement {
  id: ID!
  slug: String
  title_fa: String
  title_en: String
  buttonTitle_fa: String
  buttonTitle_en: String
  summary_fa: String
  summary_en: String
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  content_fa: Achievement_content_fa_Document
  content_en: Achievement_content_en_Document
  isActive: Boolean
}

type Achievement_content_fa_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Achievement_content_en_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AchievementWhereUniqueInput {
  id: ID
}

input AchievementWhereInput {
  AND: [AchievementWhereInput!]
  OR: [AchievementWhereInput!]
  NOT: [AchievementWhereInput!]
  id: IDFilter
  slug: StringFilter
  title_fa: StringFilter
  title_en: StringFilter
  buttonTitle_fa: StringFilter
  buttonTitle_en: StringFilter
  summary_fa: StringFilter
  summary_en: StringFilter
  images: ImageManyRelationFilter
  isActive: BooleanFilter
}

input AchievementOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title_fa: OrderDirection
  title_en: OrderDirection
  buttonTitle_fa: OrderDirection
  buttonTitle_en: OrderDirection
  summary_fa: OrderDirection
  summary_en: OrderDirection
  isActive: OrderDirection
}

input AchievementUpdateInput {
  slug: String
  title_fa: String
  title_en: String
  buttonTitle_fa: String
  buttonTitle_en: String
  summary_fa: String
  summary_en: String
  images: ImageRelateToManyForUpdateInput
  content_fa: JSON
  content_en: JSON
  isActive: Boolean
}

input AchievementUpdateArgs {
  where: AchievementWhereUniqueInput!
  data: AchievementUpdateInput!
}

input AchievementCreateInput {
  slug: String
  title_fa: String
  title_en: String
  buttonTitle_fa: String
  buttonTitle_en: String
  summary_fa: String
  summary_en: String
  images: ImageRelateToManyForCreateInput
  content_fa: JSON
  content_en: JSON
  isActive: Boolean
}

type NewsletterSubmission {
  id: ID!
  name: String
}

input NewsletterSubmissionWhereUniqueInput {
  id: ID
}

input NewsletterSubmissionWhereInput {
  AND: [NewsletterSubmissionWhereInput!]
  OR: [NewsletterSubmissionWhereInput!]
  NOT: [NewsletterSubmissionWhereInput!]
  id: IDFilter
  name: StringFilter
}

input NewsletterSubmissionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input NewsletterSubmissionUpdateInput {
  name: String
}

input NewsletterSubmissionUpdateArgs {
  where: NewsletterSubmissionWhereUniqueInput!
  data: NewsletterSubmissionUpdateInput!
}

input NewsletterSubmissionCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  pageSections(
    where: PageSectionWhereInput! = {}
    orderBy: [PageSectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PageSection!]
  pageSection(where: PageSectionWhereUniqueInput!): PageSection
  pageSectionsCount(where: PageSectionWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  navigationMenus(
    where: NavigationMenuWhereInput! = {}
    orderBy: [NavigationMenuOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NavigationMenu!]
  navigationMenu(where: NavigationMenuWhereUniqueInput!): NavigationMenu
  navigationMenusCount(where: NavigationMenuWhereInput! = {}): Int
  partners(
    where: PartnerWhereInput! = {}
    orderBy: [PartnerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Partner!]
  partner(where: PartnerWhereUniqueInput!): Partner
  partnersCount(where: PartnerWhereInput! = {}): Int
  achievements(
    where: AchievementWhereInput! = {}
    orderBy: [AchievementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Achievement!]
  achievement(where: AchievementWhereUniqueInput!): Achievement
  achievementsCount(where: AchievementWhereInput! = {}): Int
  newsletterSubmissions(
    where: NewsletterSubmissionWhereInput! = {}
    orderBy: [NewsletterSubmissionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NewsletterSubmission!]
  newsletterSubmission(
    where: NewsletterSubmissionWhereUniqueInput!
  ): NewsletterSubmission
  newsletterSubmissionsCount(where: NewsletterSubmissionWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
